name: Static Post-Release Build
# on: [push]
# on:
#   release:
#     types: [published]
on: [workflow_dispatch]
# TODO:
# - Can we check out first, bootstrap and then cache/upload/download into container?
# - Build for freebsd, sunOS?

permissions:
  contents: write

env:
  OPENSSL_VER: 1.1.1k
  TAG: v1.4.41

jobs:

  Source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dist
        run: |
          ./bootstrap
          ./configure
          make dist

      -name: Upload dist
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: gs-netcat-*.tar.gz
          overwrite: true
          file_glob: true
          tag: ${{ env.TAG }}
    
  MacOS:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3

      - name: Compile-OSX
        run: |
          brew install automake
          ./bootstrap
          ./configure --prefix=/opt --enable-static
          make all
          strip tools/gs-netcat
          (cd tools; tar cfz ../gsocket_macOS.tar.gz gs-netcat gsocket blitz gs-mount gs-sftp gs_funcs gsocket_dso.so.0 gsocket_uchroot_dso.so.0)
          mv tools/gs-netcat gs-netcat_macOS

      - name: Upload gs-netcat to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: gs-netcat_macOS
          overwrite: true
          tag: ${{ env.TAG }}

      - name: Upload gsocket to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: gsocket_macOS.tar.gz
          overwrite: true
          tag: ${{ env.TAG }}

  Cross-Compile:
    strategy:
      matrix:
        arch: [x86_64, aarch64, mips64, mips32, mipsel, i686, arm, armv6, armv7l]
        include:
          - arch: x86_64
            cc: x86_64-linux-musl
            ssl: linux-generic64
          - arch: aarch64
            cc: aarch64-linux-musl
            ssl: linux-generic64
          - arch: mips64
            cc: mips64-linux-musl
            ssl: linux64-mips64
          - arch: mips32
            cc: mips-linux-muslsf
            ssl: linux-mips32
          - arch: mipsel
            cc: mipsel-linux-muslsf
            ssl: linux-mips32
          - arch: i686
            cc: i686-linux-musl
            ssl: linux-generic32
          - arch: arm
            cc: arm-linux-musleabi
            ssl: linux-generic32
          - arch: armv6
            cc: armv6-linux-musleabi
            ssl: linux-generic32
          - arch: armv7l
            cc: armv7l-linux-musleabihf
            ssl: linux-generic32
    runs-on: ubuntu-latest
    container:
      image: muslcc/x86_64:${{ matrix.cc }}
      options: --user root
    steps:
      - uses: actions/checkout@v3

      - name: Add build dependencies
        run: |
          apk add --update --no-cache --no-progress bash perl make curl upx tar

      - name: Cache SSL
        id: cachessl
        uses: actions/cache@v3
        with:
          path: /opt
          key: ${{ matrix.arch }}-ssl

      - name: Generate OpenSSL
        if: steps.cachessl.outputs.cache-hit != 'true'
        run: |
          curl -SsfL https://www.openssl.org/source/openssl-${OPENSSL_VER:-1.1.1k}.tar.gz | tar -xzC /tmp/
          ( cd /tmp/openssl-${OPENSSL_VER:-1.1.1k} && \
          ./Configure --prefix=/opt no-tests no-dso no-threads no-shared ${{ matrix.ssl }} && \
          make install_sw )
          rm -rf rm -rf /tmp/openssl-${OPENSSL_VER} /opt/bin/openssl /opt/bin/c_rehash

      - name: SaveCache
        if: steps.cachessl.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: /opt
          key: ${{ matrix.arch }}-ssl

      - name: Compile-${{ matrix.arch }}
        run: |
          apk add --no-cache autoconf automake
          ./bootstrap
          ./configure --prefix=/opt --enable-static --host=${{ matrix.arch }}
          make all
          strip tools/gs-netcat
          (cd tools; tar cfz ../gsocket_linux-${{ matrix.arch }}.tar.gz gs-netcat gsocket blitz gs-mount gs-sftp gs_funcs gsocket_dso.so.0 gsocket_uchroot_dso.so.0)
          mv tools/gs-netcat gs-netcat_linux-${{ matrix.arch }}
      
      - name: Upload gs-netcat to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: gs-netcat_linux-${{ matrix.arch }}
          overwrite: true
          tag: ${{ env.TAG }}

      - name: Upload gsocket to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: gsocket_linux-${{ matrix.arch }}.tar.gz
          overwrite: true
          tag: ${{ env.TAG }}