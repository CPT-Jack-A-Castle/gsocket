name: Static Post-Release Build
# on: [push]
# on:
#   release:
#     types: [published]
on: [workflow_dispatch]
# TODO:
# - use matrix?
# - Can we check out first, bootstrap and then cache/upload/download into container?

permissions:
  contents: write

env:
  OPENSSL_VER: 1.1.1k

jobs:
  Cross-Compile:
    strategy:
      matrix:
        arch: [x86_64, aarch64, mips64, mips32, mipsel, i686, arm, armv6, armv7l]
        include:
          - arch: x86_64
            cc: x86_64-linux-musl
            ssl: linux-generic64
          - arch: aarch64
            cc: aarch64-linux-musl
            ssl: linux-generic64
          - arch: mips64
            cc: mips64-linux-musl
            ssl: linux64-mips64
          - arch: mips32
            cc: mips-linux-muslsf
            ssl: linux-mips32
          - arch: mipsel
            cc: mipsel-linux-muslsf
            ssl: linux-mips32
          - arch: i686
            cc: i686-linux-musl
            ssl: linux-generic32
          - arch: arm
            cc: arm-linux-musleabi
            ssl: linux-generic32
          - arch: armv6
            cc: armv6-linux-musleabi
            ssl: linux-generic32
          - arch: armv7l
            cc: armv7l-linux-musleabihf
            ssl: linux-generic32
    runs-on: ubuntu-latest
    container:
      image: muslcc/x86_64:${{ matrix.cc }}
      options: --user root
    steps:
      - uses: actions/checkout@v3

      - name: Add build dependencies
        run: |
          apk add --update --no-cache --no-progress bash perl make curl upx tar

      - name: Cache SSL
        id: cachessl
        uses: actions/cache@v3
        with:
          path: /opt
          key: ${{ matrix.arch }}-ssl

      - name: Generate OpenSSL
        if: steps.cachessl.outputs.cache-hit != 'true'
        run: |
          curl -SsfL https://www.openssl.org/source/openssl-${OPENSSL_VER}.tar.gz | tar -xzC /tmp/
          ( cd /tmp/openssl-${OPENSSL_VER} && \
          ./Configure --prefix=/opt no-tests no-dso no-threads no-shared ${{ matrix.ssl }} && \
          make install_sw )
          rm -rf rm -rf /tmp/openssl-${OPENSSL_VER} /opt/bin/openssl /opt/bin/c_rehash

      - name: SaveCache
        if: steps.cachessl.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: /opt
          key: ${{ matrix.arch }}-ssl

      - name: Compile-${{ matrix.arch }}
        run: |
          apk add --no-cache autoconf automake
          ./bootstrap
          ./configure --prefix=/opt --enable-static --host=${{ matrix.arch }}
          make all
          strip tools/gs-netcat
          mv tools/gs-netcat gs-netcat_linux-${{ matrix.arch }}
      
      - name: Upload to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: gs-netcat_linux-${{ matrix.arch }}
          overwrite: true
          tag: 1.4.40

  # Build-Upload-Actions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Bootstrap
  #       run: |
  #         ./bootstrap

  #     # https://github.com/marketplace/actions/setup-alpine-linux-environment
  #     - name: Setup Alpine x86_64
  #       uses: jirutka/setup-alpine@v1

  #     - name: Compile x86_64
  #       run: |
  #         apk add --no-cache bash musl-dev linux-headers gcc make automake autoconf openssl-dev openssl-libs-static upx
  #         ./configure --enable-static
  #         make clean all
  #         strip tools/gs-netcat
  #         mv tools/gs-netcat gs-netcat_linux-x86_64
  #       shell: alpine.sh --root {0}

  #     - name: Setup Alpine aarch64
  #       uses: jirutka/setup-alpine@v1
  #       with:
  #         arch: aarch64


  #     - name: Compile aarch64
  #       run: |
  #         apk add --no-cache bash musl-dev linux-headers gcc make automake autoconf openssl-dev openssl-libs-static upx
  #         ./configure --enable-static
  #         make clean all
  #         strip tools/gs-netcat
  #         mv tools/gs-netcat gs-netcat_linux-aarch64
  #       shell: alpine.sh --root {0}

  #     - name: Setup Alpine armhf
  #       uses: jirutka/setup-alpine@v1
  #       with:
  #         arch: armhf

  #     - name: Compile armhf
  #       run: |
  #         apk add --no-cache bash musl-dev linux-headers gcc make automake autoconf openssl-dev openssl-libs-static upx
  #         ./configure --enable-static
  #         make clean all
  #         strip tools/gs-netcat
  #         mv tools/gs-netcat gs-netcat_linux-armhf
  #       shell: alpine.sh --root {0}

  #     # - name: Setup Alpine aarch64
  #     #   uses: jirutka/setup-alpine@v1
  #     #   with:
  #     #     arch: aarch64

  #     # - name: Compile aarch64
  #     #   run: |
  #     #     apk add --no-cache bash musl-dev linux-headers gcc make
  #     #     gcc -Wall -static -o zapper-linux-aarch64 zapper.c
  #     #   shell: alpine.sh --root {0}

  #     - name: Upload binaries to release
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: gs-netcat_*
  #         file_glob: true
  #         overwrite: true
  #         tag: v1.4.40
        